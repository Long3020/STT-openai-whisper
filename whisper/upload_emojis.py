from qdrant_client import QdrantClient
from qdrant_client.models import VectorParams, Distance, PointStruct
from sentence_transformers import SentenceTransformer
from uuid import uuid5, NAMESPACE_DNS
import os
import json

# ‚öôÔ∏è Kh·ªüi t·∫°o Qdrant
client = QdrantClient(host="localhost", port=6333)
collection_name = "emoji"

# ‚ö†Ô∏è N·∫øu c·∫ßn x√≥a collection c≈©, b·ªè comment d√≤ng n√†y:
client.delete_collection(collection_name=collection_name)

# ‚úÖ T·∫°o collection n·∫øu ch∆∞a c√≥
if not client.collection_exists(collection_name=collection_name):
    client.create_collection(
        collection_name=collection_name,
        vectors_config=VectorParams(size=384, distance=Distance.COSINE)
    )
    print("‚úÖ T·∫°o collection 'emoji'")
else:
    print("‚ÑπÔ∏è Collection 'emoji' ƒë√£ t·ªìn t·∫°i")

# ü§ñ Load model
model = SentenceTransformer('all-MiniLM-L6-v2')

# üìÇ Th∆∞ m·ª•c g·ªëc ch·ª©a c√°c th∆∞ m·ª•c con c·ªßa JoyPixels
emoji_root = r"D:/Whisper/JoyPixels/png/labeled/128"
points = []

# üîç Duy·ªát ƒë·ªá quy t·∫•t c·∫£ ·∫£nh PNG trong c√°c th∆∞ m·ª•c con
for root, _, files in os.walk(emoji_root):
    for file in files:
        if file.endswith(".png"):
            unicode_name = file[:-4].lower()  # b·ªè .png v√† chuy·ªÉn lowercase
            emoji_path = os.path.join(root, file)

            description = f"emoji {unicode_name}"
            embedding = model.encode(description).tolist()

            emoji_id = str(uuid5(NAMESPACE_DNS, unicode_name))  # ID h·ª£p l·ªá

            points.append(
                PointStruct(
                    id=emoji_id,
                    vector=embedding,
                    payload={
                        "desc": description,
                        "unicode": unicode_name,
                        "path": emoji_path
                    }
                )
            )

# ‚¨ÜÔ∏è Up d·ªØ li·ªáu
if points:
    client.upsert(collection_name=collection_name, points=points)
    print(f"‚úÖ ƒê√£ l∆∞u {len(points)} emoji v√†o Qdrant!")
else:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh PNG n√†o trong th∆∞ m·ª•c.")


# Load unicode ·∫£nh png v√†o file json
# üìÅ Th∆∞ m·ª•c g·ªëc ch·ª©a c√°c th∆∞ m·ª•c con
emoji_root_folder = r"D:/Whisper/JoyPixels/png/labeled/128"
output_file = "emojis.json"

# üì¶ K·∫øt qu·∫£ gom nh√≥m theo t√™n th∆∞ m·ª•c
emoji_dict = {}

# üîÅ Duy·ªát qua t·ª´ng th∆∞ m·ª•c con
for subdir in os.listdir(emoji_root_folder):
    subdir_path = os.path.join(emoji_root_folder, subdir)
    if os.path.isdir(subdir_path):
        unicodes = [
            file[:-4].lower()
            for file in os.listdir(subdir_path)
            if file.endswith(".png")
        ]
        emoji_dict[subdir] = unicodes

# üíæ Ghi ra file JSON
with open(output_file, "w", encoding="utf-8") as f:
    json.dump(emoji_dict, f, ensure_ascii=False, indent=2)

print(f"‚úÖ ƒê√£ ghi emoji unicode theo th∆∞ m·ª•c v√†o {output_file}")

